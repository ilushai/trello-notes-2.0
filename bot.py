# bot.py
import logging
import os
import json
from aiogram import Bot, Dispatcher, executor, types
from functools import wraps

# --- –ò–º–ø–æ—Ä—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
from my_config import TELEGRAM_BOT_TOKEN, TRELLO_LISTS, TRELLO_LABELS
from user_config import AUTHORIZED_USERS, ADMIN_USERNAME, ADMIN_ID
from services.gspread_service import add_note_to_sheet, get_service_account_email
from services.speech_to_text import speech_to_text
from services.trello_service import create_trello_card
from services.llm_service import get_trello_details

# --- (–ö–æ–¥ –¥–æ handle_voice –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è) ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)
USER_SHEETS_FILE = 'user_sheets.json'
def load_user_sheets():
    if not os.path.exists(USER_SHEETS_FILE): return {}
    try:
        with open(USER_SHEETS_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except json.JSONDecodeError: return {}
def save_user_sheets(data):
    with open(USER_SHEETS_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)
user_sheets = load_user_sheets()
def authorized_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in AUTHORIZED_USERS:
            await message.reply(f"‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.**\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫: {ADMIN_USERNAME}"); return
        return await handler(message, *args, **kwargs)
    return wrapper
@dp.message_handler(commands=['start', 'help'])
@authorized_only
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id); sheet_url = user_sheets.get(user_id)
    service_email = get_service_account_email()
    if not service_email: await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å `credentials.json`."); return
    instructions = (f"üëã **–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫.**\n\n...")
    if sheet_url: instructions += f"\n‚úÖ **–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞:** [–°—Å—ã–ª–∫–∞]({sheet_url})"
    else: instructions += f"\n‚ùå **–°—Ç–∞—Ç—É—Å:** –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
    await message.answer(instructions, parse_mode='Markdown', disable_web_page_preview=True)
@dp.message_handler(commands=['set_sheet'])
@authorized_only
async def set_sheet(message: types.Message):
    user_id = str(message.from_user.id); sheet_url = message.get_args()
    if not sheet_url or not sheet_url.startswith('https://docs.google.com/spreadsheets/d/'):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É."); return
    user_sheets[user_id] = sheet_url; save_user_sheets(user_sheets)
    await message.reply(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–º–µ—Ç–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É.")
@dp.message_handler(commands=['my_sheet'])
@authorized_only
async def my_sheet(message: types.Message):
    user_id = str(message.from_user.id); sheet_url = user_sheets.get(user_id)
    if sheet_url: await message.reply(f"–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: [–°—Å—ã–ª–∫–∞]({sheet_url})", parse_mode='Markdown')
    else: await message.reply("–¢–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
async def process_note(message: types.Message, text: str):
    user_id = message.from_user.id; sheet_url = user_sheets.get(str(user_id))
    if not sheet_url: await message.reply("‚ö†Ô∏è **–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É!**"); return
    if add_note_to_sheet(text, sheet_url):
        reply_text = "‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤ Google Sheets."
        if user_id == ADMIN_ID:
            details = await get_trello_details(text)
            list_name, label_name = details["list"], details["label"]
            list_id, label_id = TRELLO_LISTS.get(list_name), TRELLO_LABELS.get(label_name)
            if create_trello_card(text, list_id, label_id):
                reply_text = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤ Google Sheets –∏ Trello (–≤ '{list_name}' —Å –º–µ—Ç–∫–æ–π '{label_name}')!"
        await message.reply(reply_text)
    else: await message.reply("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets!**")
@dp.message_handler(content_types=types.ContentType.TEXT)
@authorized_only
async def handle_text(message: types.Message):
    await process_note(message, message.text)

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–ê ---
@dp.message_handler(content_types=types.ContentType.VOICE)
@authorized_only
async def handle_voice(message: types.Message):
    os.makedirs('temp', exist_ok=True); voice_file_path = os.path.join('temp', f"{message.voice.file_id}.ogg")
    try:
        await message.voice.download(destination_file=voice_file_path)
        await message.reply("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é...")
        # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–µ–Ω await
        recognized_text = await speech_to_text(voice_file_path)
        if recognized_text and recognized_text.strip() and "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å" not in recognized_text:
            await process_note(message, recognized_text)
        else: await message.reply("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    finally:
        if os.path.exists(voice_file_path): os.remove(voice_file_path)

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)