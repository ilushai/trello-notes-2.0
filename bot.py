# bot.py
import logging
import os
import json
from aiogram import Bot, Dispatcher, executor, types
from functools import wraps

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ---
from my_config import TELEGRAM_BOT_TOKEN, TRELLO_LABELS
from user_config import AUTHORIZED_USERS, ADMIN_USERNAME, ADMIN_ID
from services.gspread_service import add_note_to_sheet, get_service_account_email
from services.speech_to_text import speech_to_text
from services.trello_service import create_trello_card
from services.llm_service import get_note_category # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)
USER_SHEETS_FILE = 'user_sheets.json'

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_sheets():
    if not os.path.exists(USER_SHEETS_FILE): return {}
    with open(USER_SHEETS_FILE, 'r') as f: return json.load(f)

def save_user_sheets(data):
    with open(USER_SHEETS_FILE, 'w') as f: json.dump(data, f, indent=4)

user_sheets = load_user_sheets()

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
def authorized_only(handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if user_id not in AUTHORIZED_USERS:
            logging.warning(f"!!! –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù –¥–ª—è ID: {user_id}")
            await message.reply(f"‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.**\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫: {ADMIN_USERNAME}")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message_handler(commands=['start', 'help'])
@authorized_only
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id)
    sheet_url = user_sheets.get(user_id)
    service_email = get_service_account_email()
    if not service_email:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å `credentials.json`. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    instructions = (
        f"üëã **–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫.**\n\n"
        f"–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:\n\n"
        f"**–®–∞–≥ 1: –°–∫–æ–ø–∏—Ä—É–π –º–æ–π email** üìß\n"
        f"–ú–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google-—Å–µ—Ä–≤–∏—Å–∞–º:\n`{service_email}`\n\n"
        f"**–®–∞–≥ 2: –°–æ–∑–¥–∞–π –∏ –ø–æ–¥–µ–ª–∏—Å—å Google –¢–∞–±–ª–∏—Ü–µ–π** üìù\n"
        f"   1. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ [sheets.google.com](https://sheets.google.com/) –∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"   2. –ù–∞–∂–º–∏ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É **'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞'** (`Share`) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n"
        f"   3. –í—Å—Ç–∞–≤—å –º–æ–π email, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª –Ω–∞ –®–∞–≥–µ 1.\n"
        f"   4. –í—ã–±–µ—Ä–∏ –¥–ª—è –º–µ–Ω—è —Ä–æ–ª—å **'–†–µ–¥–∞–∫—Ç–æ—Ä'** (`Editor`) –∏ –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.\n\n"
        f"**–®–∞–≥ 3: –ü—Ä–∏–≤—è–∂–∏ —Ç–∞–±–ª–∏—Ü—É –∫–æ –º–Ω–µ** üîó\n"
        f"**–°–∫–æ–ø–∏—Ä—É–π –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É** –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–µ —Å –∫–æ–º–∞–Ω–¥–æ–π:\n`/set_sheet https://docs.google.com/spreadsheets/d/....`\n\n"
        f"---"
    )
    if sheet_url: instructions += f"\n‚úÖ **–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞:** [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É]({sheet_url})"
    else: instructions += f"\n‚ùå **–°—Ç–∞—Ç—É—Å:** –¢–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
    await message.answer(instructions, parse_mode='Markdown', disable_web_page_preview=True)

@dp.message_handler(commands=['set_sheet'])
@authorized_only
async def set_sheet(message: types.Message):
    user_id = str(message.from_user.id)
    sheet_url = message.get_args()
    if not sheet_url or not sheet_url.startswith('https://docs.google.com/spreadsheets/d/'):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/set_sheet https://...`")
        return
    user_sheets[user_id] = sheet_url
    save_user_sheets(user_sheets)
    await message.reply(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É.", parse_mode='Markdown')

@dp.message_handler(commands=['my_sheet'])
@authorized_only
async def my_sheet(message: types.Message):
    user_id = str(message.from_user.id)
    sheet_url = user_sheets.get(user_id)
    if sheet_url: await message.reply(f"–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É]({sheet_url})", parse_mode='Markdown')
    else: await message.reply("–¢–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/set_sheet`.")

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò (–ò–ó–ú–ï–ù–ï–ù–û) ---
async def process_note(message: types.Message, text: str):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
    """
    user_id = message.from_user.id
    sheet_url = user_sheets.get(str(user_id))

    if not sheet_url:
        await message.reply("‚ö†Ô∏è **–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É!**\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/help`.")
        return
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç LLM
    await message.reply("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –ø–æ –ø–æ–ª–æ—á–∫–∞–º...")
    categorization = get_note_category(text)
    
    category = categorization["category"]
    trello_list_id = categorization["trello_list_id"]
    trello_label_ids = categorization["trello_label_ids"]
    
    # 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    sheets_success = add_note_to_sheet(text, category, sheet_url)
    
    if sheets_success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        label_names = [key.upper() for key, value in TRELLO_LABELS.items() if value in trello_label_ids]
        labels_str = ", ".join(label_names)

        reply_text = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞: **{category}**)."
        
        # 3. –ï—Å–ª–∏ –∞–¥–º–∏–Ω - —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello
        if user_id == ADMIN_ID:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º. –°–æ–∑–¥–∞—é –∫–∞—Ä—Ç–æ—á–∫—É Trello.")
            trello_success = create_trello_card(name=text, id_list=trello_list_id, id_labels=trello_label_ids)
            if trello_success:
                reply_text = f"‚úÖ –ì–æ—Ç–æ–≤–æ! Google Sheets (–∫–æ–ª–æ–Ω–∫–∞: **{category}**) –∏ Trello (–º–µ—Ç–∫–∏: **{labels_str}**)."
            else:
                reply_text += "\n‚ùå **–ù–æ –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello!**"
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é Trello.")

        await message.reply(reply_text, parse_mode='Markdown')
    else:
        await message.reply("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets!**")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(content_types=types.ContentType.TEXT)
@authorized_only
async def handle_text(message: types.Message):
    await process_note(message, message.text)

@dp.message_handler(content_types=types.ContentType.VOICE)
@authorized_only
async def handle_voice(message: types.Message):
    os.makedirs('temp', exist_ok=True)
    voice_file_path = os.path.join('temp', f"{message.voice.file_id}.ogg")
    try:
        await message.voice.download(destination_file=voice_file_path)
        await message.reply("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
        recognized_text = speech_to_text(voice_file_path)
        if recognized_text and recognized_text.strip() and "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å" not in recognized_text:
            await process_note(message, recognized_text)
        else:
            await message.reply("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    finally:
        if os.path.exists(voice_file_path): os.remove(voice_file_path)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)